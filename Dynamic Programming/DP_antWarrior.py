#식량창고의 개수
n = int(input())
#식량창고에 저장된 식량의 개수 k
k = list(map(int,input().split()))
#식량창고의 총 개수는 최대 100개까지 가능하다
d = [0] * 100

d[0] = k[0]
#식량창고에 저장된 식량의 개수에서의 첫번째를 d[0]에 넣어준다
d[1] = max(k[0],k[1])
# d[1]의 경우에는 식량창고 첫번째와 두번째중 더 큰 수를 넣어주게 된다 이렇게 하는 경우는 나중에 제일 최대값을 꺼내기 위함이다.
for i in range(2, n):
    d[i] = max(d[i-1], k[i] + d[i-2])
    #d[0],d[1]을 이미 만들었느니, range는 2부터 n-1까지 시행해주면 되며, n-1인 이유는 index는 0부터 시작하기 때문이다.
#     이떄 d[i]에 들어갈 것은 마지막 짝수의 두개가 들어가던가, 아니면 현재 index의 전번째가 들어가게 되는데, 이는 가장 많은 양을 넣어주기 위함이다.
print(d[n-1])

# 따라서 DP의 바텀업의 경우는 실제 점화식처럼 첫번째 케이스와 두번째 케이스를 먼저 만들어둔뒤, 일반 점화식을 구하면 되는 식으로 진행된다.
